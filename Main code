module get_data(
input[7:0] dataIn,//input data
input dataReady,//data ready flag
input clk,// clock
input reset,// reset signal
output[7:0] LED//LED o/p
);

reg[2:0] Byte_Count = 0;//byte count, 0 and 3 is on/.off, 1 and 4 is data
reg[7:0] data_temp;// temp data storage 
reg[7:0] LED_out;// LED value



wire clk_l;

assign clk_l = clk;



always @(posedge clk_l)begin
	if(!reset)begin
		Byte_Count<=0;
		LED_out<=0;
	end



data_temp <= dataIn;//save data

case(Byte_Count)
	3'b000://byte 1, turning on 
	begin
		if(dataReady)begin 
			Byte_Count <= 3'b001;//next byte 
		end
		else
			Byte_Count <= 3'b000;
	end 

	3'b001://byte 2, data on
	begin
		if(dataReady)begin
			LED_out <= data_temp;//moving data 
			Byte_Count <= 3'b010;//next 
		end
		else
			Byte_Count <= 3'b001;
	end
	
	3'b010://byte 3
	begin
		if(dataReady)begin
			Byte_Count <= 3'b011;//next, end of first note
		end
		else
			Byte_Count <= 3'b010;
	end

	3'b011://byte 4
	begin
		if(dataReady)begin
			LED_out <= 8'b0;
			Byte_Count <= 3'b100;//next
		end 
		else
			Byte_Count <= 3'b011;
	end
	
	3'b100://byte 5, really just sit and do nothing
	begin
		if(dataReady)begin
			Byte_Count <= 3'b101;//next
		end else
			Byte_Count <= 3'b100;
	end
	
	3'b101://byte 6, ready to loop back
	begin 
		if(dataReady)begin
			Byte_Count <= 3'b000;//loop back 
		end else
			Byte_Count <= 3'b101;
	end
	
	
	
	default:
		Byte_Count <= 0;
endcase//end of case

end//end of clk_l

assign LED = LED_out;//

endmodule 
module sample(
   input        clk,
   input		reset,
   input        i_Rx_Serial,//data input
   output       o_Rx_DV,//data ready flag bit
   output [7:0] o_Rx_Byte//data byte 

   );
 /*
 * states
 */
  reg[3:0] s_IDLE         = 3'b000;
  reg[3:0] s_RX_START_BIT = 3'b001;
  reg[3:0] s_RX_DATA_BITS = 3'b010;
  reg[3:0] s_RX_STOP_BIT  = 3'b011;
  reg[3:0] s_CLEANUP      = 3'b100;
 /////////////////////////////////////////////
  reg[7:0] CLKS_PER_BIT = 8'b10000000;// 128 cycle per bit in midi 
  wire clk_l;
  assign clk_l=clk;
   
  reg           r_Rx_Data_R = 1'b1;
  reg           r_Rx_Data   = 1'b1;
 ////////////////////////////////////////////  
  reg [7:0]     r_Clock_Count = 0;
  reg [2:0]     r_Bit_Index   = 0; //8 bits total
  reg [7:0]     r_Rx_Byte     = 0;
  reg           r_Rx_DV       = 0;
  reg [2:0]     r_SM_Main     = 0; //state reg
  
 
 
   
  /*
  *sampling, with two flip-flop, preventing metastability(?)
  */
  always @(posedge clk_l)
    begin
      r_Rx_Data_R <= i_Rx_Serial;
      r_Rx_Data   <= r_Rx_Data_R;
    end
   
   
  // Purpose: Control RX state machine
  always @(posedge clk_l)
    begin
   if(!reset) begin
		r_SM_Main <= s_IDLE;
		r_Clock_Count <= 0;
		r_Rx_DV       <= 0;
		r_Rx_Byte     <= 0;
   end
       
      case (r_SM_Main)
        s_IDLE :
          begin
            r_Rx_DV       <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (r_Rx_Data == 1'b0)          // Start bit detected
              r_SM_Main <= s_RX_START_BIT;
            else
              r_SM_Main <= s_IDLE;
          end
         
        // Check middle of start bit to make sure it's still low
        s_RX_START_BIT :
          begin
            if (r_Clock_Count == (CLKS_PER_BIT-1)/2)//half BT
              begin
                if (r_Rx_Data == 1'b0)
                  begin
                    r_Clock_Count <= 0;  // reset counter, found the middle
                    r_SM_Main     <= s_RX_DATA_BITS;
                  end
                else
                  r_SM_Main <= s_IDLE;
              end
            else
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_START_BIT;
              end
          end // case: s_RX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles to sample serial data
        s_RX_DATA_BITS :
          begin
            if (r_Clock_Count < CLKS_PER_BIT-1)//sample every 1BT
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count          <= 0;
                r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
                 
                // Check if we have received all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_RX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_RX_STOP_BIT;
                  end
              end
          end // case: s_RX_DATA_BITS
     
     
        // Receive Stop bit.  Stop bit = 1
        s_RX_STOP_BIT :
          begin
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_STOP_BIT;
              end
            else
              begin
                r_Rx_DV       <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
              end
          end // case: s_RX_STOP_BIT
     
         
        // Stay here 1 clock, reset data ready flag
        s_CLEANUP :
          begin
            r_SM_Main <= s_IDLE;
            r_Rx_DV   <= 1'b0;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end   
  
  assign o_Rx_DV   = r_Rx_DV;
  assign o_Rx_Byte = r_Rx_Byte;
   
endmodule // uart_rx
module usar(
clk,	// clock
reset,	// reset signal 
midi,	// midi input data line, 1 bit per BT
LED	// LED light value, 1 byte 
);
input clk;
input reset;
input midi;

output [7:0] LED;

// wires and reg
wire midi_l;//wire version of midi
wire reset_l;
wire [7:0]sndByte_LED;// data o/p of get_data
wire LEDon;// LEDenable signal 
wire [7:0]dataLine; //sampled data ready to be processed 
wire dataReady; //signal for 1 byte data sampled

wire [1:0]ByteNum;//# of current byte


///sample output
wire enable ; // enable 
wire [7:0]nbit ;
// getdata out

//<<<----------------------------data in, Sampling
sample n_byte(clk,reset,midi,enable,nbit);

//<<<----------------------------Sampling done, processing
get_data Process(nbit, enable,clk,reset,LED);

endmodule 
