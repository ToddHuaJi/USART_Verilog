module Lab_4(
input[7:0] dataIn,//input data
input dataReady,//data ready flag
input clk,// clock
input reset,// reset signal
output[7:0] LED//LED o/p
);

reg[2:0] Byte_Count = 0;//byte count, 0 and 3 is on/.off, 1 and 4 is data
reg[7:0] data_temp;// temp data storage 
reg[7:0] LED_out;// LED value



wire clk_l;

assign clk_l = clk;


always @(posedge clk)
if(!reset) begin
//nah
end

always @(posedge clk_l)begin

data_temp <= dataIn;//save data

case(Byte_Count)
	3'b000://byte 1, turning on 
	begin
		if(dataReady)begin 
			Byte_Count = 3'b001;//next byte 
		end
		else
			Byte_Count = 3'b000;
	end 

	3'b001://byte 2, data on
	begin
		if(dataReady)begin
			LED_out <= data_temp;//moving data 
			Byte_Count = 3'b010;//next 
		end
		else
			Byte_Count = 3'b001;
	end
	
	3'b010://byte 3
	begin
		if(dataReady)begin
			Byte_Count = 3'b011;//next, end of first note
		end
		else
			Byte_Count = 3'b010;
	end

	3'b011://byte 4
	begin
		if(dataReady)begin
			LED_out <= 8'b0;
			Byte_Count = 3'b100;//next
		end 
		else
			Byte_Count = 3'b011;
	end
	
	3'b100://byte 5, really just sit and do nothing
	begin
		if(dataReady)begin
			Byte_Count = 3'b101;//next
		end else
			Byte_Count = 3'b100;
	end
	
	3'b101://byte 6, ready to loop back
	begin 
		if(dataReady)begin
			Byte_Count = 3'b000;//loop back 
		end else
			Byte_Count = 3'b101;
	end
	
	
	
	default:
		Byte_Count = 0;
endcase//end of case

end//end of clk_l

assign LED = LED_out;//

endmodule 
